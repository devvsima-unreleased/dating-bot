from aiogram import F, types
from aiogram.filters.state import StateFilter
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload

from app.handlers.bot_utils import send_service_profile
from app.handlers.message_text import user_message_text as umt
from app.keyboards.default.base import offer_menu_kb, offer_profile_kb
from app.routers import offers_router
from database.models import UserModel


@offers_router.message(F.text == "üíº", StateFilter(None))
async def _offer_menu(message: types.Message) -> None:
    await message.answer(umt.OFFER_MENU, reply_markup=offer_menu_kb)


@offers_router.message(F.text == "üí∞", StateFilter(None))
async def _view_service_profile_command(
    message: types.Message, session: AsyncSession, user: UserModel
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ª—É–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º —É—Å–ª—É–≥–∏
    result = await session.execute(
        select(UserModel)
        .options(joinedload(UserModel.offer))  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        .where(UserModel.id == user.id)
    )
    user_with_profile = result.scalar_one_or_none()

    if user_with_profile and user_with_profile.offer:
        await send_service_profile(message.from_user.id, user_with_profile.offer)
        await message.answer(umt.OFFER_PROFILE_MENU, reply_markup=offer_profile_kb)
    else:
        await message.reply("‚ùå –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ª—É–≥–∏. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
