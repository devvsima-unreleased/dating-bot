from aiogram import F, types
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext

from app.handlers.bot_utils import menu, send_service_profile
from app.handlers.message_text import user_message_text as umt
from app.keyboards.default.base import search_kb
from app.others.states import ServiceSearch
from app.routers import offers_router
from database.models import UserModel
from database.services.offer import Offers
from database.services.search import search_service_profiles

from ..common.cancel import cancel_command


@offers_router.message(F.text == "üîé", StateFilter(None))
async def _search_service_command(
    message: types.Message, state: FSMContext, user: UserModel, session
) -> None:
    """–ë–æ—Ç –ø–æ–¥–±–∏—Ä–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ —É—Å–ª—É–≥, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Ö"""
    await message.answer(umt.SEARCH_SERVICES, reply_markup=search_kb)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π —É—Å–ª—É–≥
    service_list = await search_service_profiles(session, user)
    if service_list:
        await state.set_state(ServiceSearch.search)
        await state.update_data(ids=service_list)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ª—É–≥–∏
        service_profile = await Offers.get(session, service_list[0])
        await send_service_profile(message.from_user.id, service_profile)
    else:
        await message.answer(umt.INVALID_SERVICE_SEARCH)
        await menu(message.from_user.id)


@offers_router.message(F.text.in_(("‚ù§Ô∏è", "üëé")), StateFilter(ServiceSearch.search))
async def _search_service_profile(message: types.Message, state: FSMContext, session) -> None:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ —É—Å–ª—É–≥, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –±–æ—Ç–æ–º,
    —Å—Ç–∞–≤—è –ª–∞–π–∫ –∏–ª–∏ –¥–∏–∑–ª–∞–π–∫.
    """
    data = await state.get_data()
    service_list = data.get("ids", [])
    current_service = await Offers.get(session, service_list[0])

    if message.text == "‚ù§Ô∏è":
        await message.answer("–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç—É —É—Å–ª—É–≥—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥

    elif message.text == "üëé":
        await message.answer("–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —ç—Ç—É —É—Å–ª—É–≥—É.")

    service_list.pop(0)
    if service_list:
        next_service = await Offers.get(session, service_list[0])
        await state.update_data(ids=service_list)
        await send_service_profile(message.from_user.id, next_service)
    else:
        await message.answer(umt.EMPTY_SERVICE_SEARCH)
        await cancel_command(message, state)
