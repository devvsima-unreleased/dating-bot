import html
import re

from app.handlers.message_text import user_message_text as umt
from app.keyboards.default.base import menu_kb
from app.keyboards.inline.admin import block_user_ikb
from app.keyboards.inline.archive import check_archive_ikb
from data.config import MODERATOR_GROUP
from database.models import ProfileModel, UserModel
from database.models.service_profile import ServiceProfileModel
from database.services import User
from loader import bot
from utils.logging import logger

effect_dict = {
    "üî•": "5104841245755180586",
    "üëç": "5107584321108051014",
    "üëé": "5104858069142078462",
    "üéâ": "5046509860389126442",
    "üí©": "5046589136895476101",
}


def check_args_type(type: type, data_list: str) -> list | bool:
    try:
        return list(map(type, re.split(r"[ ,]+", data_list)))
    except:
        return False


async def menu(chat_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    await bot.send_message(
        chat_id=chat_id,
        text=umt.MENU,
        reply_markup=menu_kb,
    )


async def complaint_to_profile(user: UserModel, profile: ProfileModel, session) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–ª–∞ –∂–∞–ª–æ–±–∞"""
    if MODERATOR_GROUP:
        try:
            await send_profile(MODERATOR_GROUP, profile)
            reported_user = await User.get(session, profile.user_id)

            text = umt.REPORT_TO_USER.format(
                user.id, user.username, profile.user_id, reported_user.username
            )

            await bot.send_message(
                chat_id=MODERATOR_GROUP,
                text=text,
                reply_markup=block_user_ikb(
                    user_id=profile.user_id,
                    username=reported_user.username,
                ),
            )
        except:
            logger.error("–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫—É—é –≥—Ä—É–ø–ø—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ")


async def send_profile(chat_id: int, profile: ProfileModel) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—å"""
    await bot.send_photo(
        chat_id=chat_id,
        photo=profile.photo,
        caption=f"{profile.name}, {profile.age}, {profile.city}\n{profile.description}",
        parse_mode=None,
    )


async def send_service_profile(chat_id: int, profile: ServiceProfileModel) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ª—É–≥–∏"""
    location_name = profile.location.name if profile.location else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    instagram_link = f"\nInstagram: @{profile.instagram}" if profile.instagram else ""

    await bot.send_photo(
        chat_id=chat_id,
        photo=profile.photo,
        caption=(
            f"{profile.name}, {profile.age}\n"
            f"–õ–æ–∫–∞—Ü–∏—è: {location_name}\n"
            f"{profile.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
            f"{instagram_link}"
        ),
        parse_mode=None,
    )


async def new_user_alert_to_group(user: UserModel) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫—É–± –≥—Ä—É–ø–ø—É –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    if MODERATOR_GROUP:
        try:
            await bot.send_message(
                chat_id=MODERATOR_GROUP,
                text="New user!\n<code>{}</code> (@{})".format(user.id, user.username),
            )
        except:
            logger.error("–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫—É—é –≥—Ä—É–ø–ø—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ")


def generate_user_link(user_id: int, username: str = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω username, —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ https://t.me/username,
    –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è tg://user?id=user_id.
    """
    if username:
        return f"https://t.me/{username}"
    return f"tg://user?id={user_id}"


async def sending_user_contact(chat_id: int, name: str, language: str, user_link: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await bot.send_message(
            chat_id=chat_id,
            text=umt.LIKE_ACCEPT(language).format(user_link, html.escape(name)),
            message_effect_id=effect_dict["üéâ"],
        )
    except:
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
        )


async def send_user_like_alert(user: UserModel):
    try:
        await bot.send_message(
            chat_id=user.id,
            text=umt.LIKE_PROFILE(user.language),
            reply_markup=check_archive_ikb(),
        )
    except:
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} @{user.username}:\
            –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–Ω–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, –≤–µ—Ä–æ—è—Ç–Ω–æ –∏–∑ –∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∞–∫–∏ –±–æ—Ç–∞"
        )
